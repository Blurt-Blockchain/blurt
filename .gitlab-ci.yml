image: conanio/gcc8

stages:
  - build
  - docker
  - triggers
  - pdfs

cache:
  paths:
    - .cache/conan
    # ccache doesnt work
    - ccache


before_script:
  - sudo apt-get update -qq
  - sudo apt-get install -qq doxygen
  - conan config set storage.path="${CI_PROJECT_DIR}/.cache/conan"
  # Pull in submodules
  - git submodule update --init --recursive
  # ccache for acceleration
  - mkdir -p ccache
  - export CCACHE_BASEDIR=${PWD}
  - export CCACHE_DIR=${PWD}/ccache


debug:
  stage: build
  script:
    - mkdir build
    - cd build
    - conan install .. -s compiler=gcc -s compiler.libcxx=libstdc++11 -if=. -pr=default --build=missing
    # Debug Build Config: (Note: DCMAKE_BUILD_TYPE=Debug)
    - cmake -DBLURT_STATIC_BUILD=OFF -DLOW_MEMORY_NODE=ON -DCLEAR_VOTES=ON -DBUILD_BLURT_TESTNET=OFF -DSKIP_BY_TX_ID=ON -DBLURT_LINT_LEVEL=OFF -DENABLE_MIRA=OFF -DCMAKE_BUILD_TYPE=Debug ..
    - make -j$(nproc) blurtd
    # Fix recovery of artifacts :/
    - pwd
  tags:
    - metal
  artifacts:
    paths:
      - /builds/blurt/blurt/build/bin/blurtd
      - /builds/blurt/blurt/build/bin/cli_wallet
#  except:
#    changes:
#        - doc/*


low_memory:
  stage: build
  script:
    - mkdir build
    - cd build
    - conan install .. -s compiler=gcc -s compiler.libcxx=libstdc++11 -if=. -pr=default --build=missing
    # Witness Build Config: -DLOW_MEMORY_NODE=ON -DCLEAR_VOTES=ON
    - cmake -DBLURT_STATIC_BUILD=ON -DLOW_MEMORY_NODE=ON -DCLEAR_VOTES=ON -DBUILD_BLURT_TESTNET=OFF -DSKIP_BY_TX_ID=ON -DBLURT_LINT_LEVEL=OFF -DENABLE_MIRA=ON -DCMAKE_BUILD_TYPE=Release ..
    - make -j$(nproc) blurtd cli_wallet
  # cli wallet is only used for witness, so we capture it from the witness build
  tags:
    - metal
  artifacts:
    paths:
      - /builds/blurt/blurt/build/bin/blurtd
      - /builds/blurt/blurt/build/bin/cli_wallet
#  except:
#    changes:
#        - doc/*

rpc:
  stage: build
  script:
    - mkdir build
    - cd build
    - conan install .. -s compiler=gcc -s compiler.libcxx=libstdc++11 -if=. -pr=default --build=missing
    # Full Node Build Configuration -DLOW_MEMORY_NODE=OFF -DCLEAR_VOTES=OFF
    - cmake -DBLURT_STATIC_BUILD=ON -DLOW_MEMORY_NODE=OFF -DCLEAR_VOTES=OFF -DBUILD_BLURT_TESTNET=OFF -DSKIP_BY_TX_ID=OFF -DBLURT_LINT_LEVEL=OFF -DENABLE_MIRA=OFF -DCMAKE_BUILD_TYPE=Release ..
    - make -j$(nproc) blurtd
  tags:
    - metal
  artifacts:
    paths:
      - /builds/blurt/blurt/build/bin/blurtd
      - /builds/blurt/blurt/build/bin/cli_wallet

#  except:
#    changes:
#        - doc/*

pdfs:
  stage: build
  #makes sure that the document generator does not pick up the cache and do strange things.
  cache: {}
  before_script:
    # Download and install pandoc and kramdown before we begin
    # pandoc does PDF, but requires pdflatex, which can be a ~500mb download
    # so we go for kramdown, which handles PDF, but doesn't handle DOCX
    - apt-get update -y
    - apt-get install -y pandoc texlive-xetex
  script:
    # Runs pandoc on all .md files in the repo and outputs them as PDF and DOCX
    - pandoc doc/witnesses.md --pdf-engine=xelatex --o witnesses.pdf
  artifacts:
    # Attach all untracked files (e.g. files that were recently created and not yet committed to git) as artifacts.
    # These are the files you then download after the job has finished.
    untracked: true
  only:
    # Only run on the master branch
    refs:
      - dev
      - master
    changes:
      - doc/witnesses.md

docker-low_memory:
  image: docker:latest
  variables:
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:dind
  stage: build
  except:
    - master
  script:
    - cd contrib/Dockerfiles/low_memory
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t registry.gitlab.com/blurt/docker/$CI_COMMIT_BRANCH/blurt_low_memory .
    - docker push registry.gitlab.com/blurt/docker/$CI_COMMIT_BRANCH/blurt_low_memory
  needs: ["low_memory"]

docker-rpc:
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: ""
  stage: build
  except:
    - master
  script:
    - cd contrib/Dockerfiles/rpc
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t registry.gitlab.com/blurt/docker/$CI_COMMIT_BRANCH/rpc .
    - docker push registry.gitlab.com/blurt/docker/$CI_COMMIT_BRANCH/rpc
  needs: ["rpc"]

rosetta:
  stage: build
  trigger: blurt/rosetta


