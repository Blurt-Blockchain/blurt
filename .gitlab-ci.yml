stages:
  - build
  - docker
  - test
  - review
  - staging
  - production
  - pdfs


# Build only when dev branch changes.  Note: update Dockerfile to clone dev
megadrive-build:
  stage: build
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker buildx build --file megadrive/build/Dockerfile --tag $CI_REGISTRY_IMAGE/md-build --cache-from $CI_REGISTRY_IMAGE/md-build:cache --cache-to $CI_REGISTRY_IMAGE/md-build:cache --platform linux/arm64 --push --progress plain .
  tags:
    - arm64
  only:
    - master


# construct the megadrive image
megadrive:
  stage: build
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/md-build
    - docker container create --name blurtarm $CI_REGISTRY_IMAGE/md-build /bin/bash
    - docker cp blurtarm:/blurt/build/bin megadrive/
    - docker cp blurtarm:blurt/contrib/blurtd.service megadrive/
    - docker container rm blurtarm
    - cd megadrive
    - docker buildx build --file Dockerfile --tag $CI_REGISTRY_IMAGE/megadrive --load --progress plain .
    - docker push $CI_REGISTRY_IMAGE/megadrive
    - cd ..
    - bash megadrive/build.sh
    - xz -T $(nproc) images/megadrive.img
  tags:
    - arm64
  artifacts:
    paths:
      - /megadrive/images/megadrive.img.xz
      - /megadrive/bin/blurtd
      - /megadrive/bin/cli_wallet

lm no mira:
  image: conanio/clang10
  before_script:
    - sudo apt-get update -qq
    - sudo apt-get install -qq doxygen
    - conan config set storage.path="${CI_PROJECT_DIR}/.cache/conan"
    # Pull in submodules
    - git submodule update --init --recursive
    # ccache for acceleration
    - mkdir -p ccache
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache
  stage: build
  script:
    - mkdir build
    - cd build
    - conan install .. -s compiler=clang -s compiler.libcxx=libstdc++11 -if=. -pr=default --build=missing
    # Witness Build Config: -DLOW_MEMORY_NODE=ON -DCLEAR_VOTES=ON
    - cmake -DBLURT_STATIC_BUILD=ON -DLOW_MEMORY_NODE=ON -DCLEAR_VOTES=ON -DBUILD_BLURT_TESTNET=OFF -DSKIP_BY_TX_ID=ON -DBLURT_LINT_LEVEL=OFF -DENABLE_MIRA=OFF -DCMAKE_BUILD_TYPE=Release ..
    - make -j$(nproc) blurtd cli_wallet
  # cli wallet is only used for witness, so we capture it from the witness build
  tags:
    - metal
  artifacts:
    paths:
      - /builds/blurt/blurt/build/bin/

low_memory:
  image: conanio/clang10
  before_script:
    - sudo apt-get update -qq
    - sudo apt-get install -qq doxygen
    - conan config set storage.path="${CI_PROJECT_DIR}/.cache/conan"
    # Pull in submodules
    - git submodule update --init --recursive
    # ccache for acceleration
    - mkdir -p ccache
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache
  stage: build
  script:
    - mkdir build
    - cd build
    - conan install .. -s compiler=clang -s compiler.libcxx=libstdc++11 -if=. -pr=default --build=missing
    # Witness Build Config: -DLOW_MEMORY_NODE=ON -DCLEAR_VOTES=ON
    - cmake -DBLURT_STATIC_BUILD=ON -DLOW_MEMORY_NODE=ON -DCLEAR_VOTES=ON -DBUILD_BLURT_TESTNET=OFF -DSKIP_BY_TX_ID=ON -DBLURT_LINT_LEVEL=OFF -DENABLE_MIRA=ON -DCMAKE_BUILD_TYPE=Release ..
    - make -j$(nproc) blurtd cli_wallet
  # cli wallet is only used for witness, so we capture it from the witness build
  tags:
    - metal
  artifacts:
    paths:
      - /builds/blurt/blurt/build/bin/

rpc:
  image: conanio/clang10
  before_script:
    - sudo apt-get update -qq
    - sudo apt-get install -qq doxygen
    - conan config set storage.path="${CI_PROJECT_DIR}/.cache/conan"
    # Pull in submodules
    - git submodule update --init --recursive
    # ccache for acceleration
    - mkdir -p ccache
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache
  stage: build
  script:
    - mkdir build
    - cd build
    - conan install .. -s compiler=clang -s compiler.libcxx=libstdc++11 -if=. -pr=default --build=missing
    - cmake -DBLURT_STATIC_BUILD=ON -DLOW_MEMORY_NODE=OFF -DCLEAR_VOTES=OFF -DBUILD_BLURT_TESTNET=OFF -DSKIP_BY_TX_ID=OFF -DBLURT_LINT_LEVEL=OFF -DENABLE_MIRA=OFF -DCMAKE_BUILD_TYPE=Release ..
    - make -j$(nproc) blurtd cli_wallet
  tags:
    - metal
  artifacts:
    paths:
      - /builds/blurt/blurt/build/bin/

pdfs:
  image: debian:10
  stage: pdfs
  #makes sure that the document generator does not pick up the cache and do strange things.
  cache: {}
  before_script:
    # Download and install pandoc and kramdown before we begin
    # pandoc does PDF, but requires pdflatex, which can be a ~500mb download
    # so we go for kramdown, which handles PDF, but doesn't handle DOCX
    - apt-get update -y
    - apt-get install -y pandoc texlive-xetex
  script:
    # Runs pandoc on all .md files in the repo and outputs them as PDF and DOCX
    - pandoc doc/witnesses/README.md --pdf-engine=xelatex --o witnesses.pdf
  artifacts:
    # Attach all untracked files (e.g. files that were recently created and not yet committed to git) as artifacts.
    # These are the files you then download after the job has finished.
    untracked: true
  only:
    changes:
      - doc/witnesses.md
  tags:
      - metal
  needs: []

kaniko low memory:
  stage: docker
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/contrib/Dockerfiles/ci/Dockerfile --destination $CI_REGISTRY_IMAGE/low_memory:$CI_COMMIT_BRANCH
  dependencies:
    - low_memory

kaniko rpc:
  stage: docker
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/contrib/Dockerfiles/rpc/Dockerfile --destination $CI_REGISTRY_IMAGE/rpc:$CI_COMMIT_BRANCH
  dependencies:
    - rpc

kaniko lm no mira:
  stage: docker
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/contrib/Dockerfiles/ci/Dockerfile --destination $CI_REGISTRY_IMAGE/rpcnomira:$CI_COMMIT_BRANCH
  dependencies:
    - lm no mira
