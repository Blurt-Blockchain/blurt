stages:
  - build
  - docker
  - test
  - review
  - staging
  - production
  - pdfs



testnet:
    image: conanio/clang10
    before_script:
    - sudo apt-get update -qq
    - sudo apt-get install -qq doxygen
    - conan config set storage.path="${CI_PROJECT_DIR}/.cache/conan"
    # Pull in submodules
    - git submodule update --init --recursive
    # ccache for acceleration
    - mkdir -p ccache
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache
    stage: build
    script:
    - mkdir build
    - cd build
    - conan install .. -s compiler=clang -s compiler.libcxx=libstdc++11 -if=. -pr=default --build=missing
    # Testnet Build Config:   # LOW_MEMORY=OFF CLEAR_VOTES=OFF TESTNET=ON ENABLE_MIRA=OFF <- thx hive
    - cmake -DBLURT_STATIC_BUILD=ON -DLOW_MEMORY_NODE=OFF -DCLEAR_VOTES=OFF -DBUILD_BLURT_TESTNET=ON -DSKIP_BY_TX_ID=ON -DBLURT_LINT_LEVEL=OFF -DENABLE_MIRA=OFF -DCMAKE_BUILD_TYPE=Release ..
    - make -j$(nproc) blurtd cli_wallet
  # cli wallet is only used for witness, so we capture it from the witness build
    tags:
    - metal
    artifacts:
      paths:
        - /builds/blurt/blurt/build/bin/

# Took sonarcloud's default multi-stage thing and made it a single stage.
sonarcloud: 
  stage: test
  image: conanio/clang10
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
    # note that variables SONAR_HOST_URL and SONAR_TOKEN are transmitted to the environament through Gitlab CI

  # this job sdownloads ans unpacks the build-wrapper and the sonar-scanner
  # in this example it is done for every build.
  # This can be optimized by caching the files or better, by including them, in the build docker image

  script:
    # Download build-wrapper
    - curl "${SONAR_HOST_URL}/static/cpp/build-wrapper-linux-x86.zip" --output build-wrapper-linux-x86.zip
    - unzip build-wrapper-linux-x86.zip
    # workaround to the bw haswell bug
    - cp build-wrapper-linux-x86/libinterceptor-x86_64.so build-wrapper-linux-x86/libinterceptor-haswell.so
    # get sonar-scanner
    - curl 'https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.2.0.1873-linux.zip' --output sonar-scanner-cli-4.2.0.1873-linux.zip
    - unzip sonar-scanner-cli-4.2.0.1873-linux.zip
    - mv sonar-scanner-4.2.0.1873-linux sonar-scanner
# NO CACHE: SINGLE-STAGE
#  cache:
#    policy: push
#    key: "${CI_COMMIT_SHORT_SHA}"
#    paths:
#      - build-wrapper-linux-x86/ # to share the build-wrapper between jobs
#      - sonar-scanner/           # to share the sonar-scanner between jobs
    # prepare the build tree
    - mkdir build
    - cd build
    - conan install .. -s compiler=clang -s compiler.libcxx=libstdc++11 -if=. -pr=default --build=missing
    - cmake -DBLURT_STATIC_BUILD=ON -DLOW_MEMORY_NODE=ON -DCLEAR_VOTES=ON -DBUILD_BLURT_TESTNET=OFF -DSKIP_BY_TX_ID=ON -DBLURT_LINT_LEVEL=OFF -DENABLE_MIRA=ON -DCMAKE_BUILD_TYPE=Release ..
    - cd ..
    # run the build inside the build wrapper
    - build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir build_wrapper_output_directory cmake --build build/ --config Release
    - sonar-scanner/bin/sonar-scanner -X -Dsonar.host.url="${SONAR_HOST_URL}" -Dsonar.token="${SONAR_TOKEN}"
  artifacts:
    paths:
      - /builds/blurt/blurt/build/bin/  
  only:
    - merge_requests
    - master
    - dev

lm no mira:
  image: conanio/clang10
  before_script:
    - sudo apt-get update -qq
    - sudo apt-get install -qq doxygen
    - conan config set storage.path="${CI_PROJECT_DIR}/.cache/conan"
    # Pull in submodules
    - git submodule update --init --recursive
    # ccache for acceleration
    - mkdir -p ccache
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache
  stage: build
  script:
    - mkdir build
    - cd build
    - conan install .. -s compiler=clang -s compiler.libcxx=libstdc++11 -if=. -pr=default --build=missing
    # Witness Build Config: -DLOW_MEMORY_NODE=ON -DCLEAR_VOTES=ON
    - cmake -DBLURT_STATIC_BUILD=ON -DLOW_MEMORY_NODE=ON -DCLEAR_VOTES=ON -DBUILD_BLURT_TESTNET=OFF -DSKIP_BY_TX_ID=ON -DBLURT_LINT_LEVEL=OFF -DENABLE_MIRA=OFF -DCMAKE_BUILD_TYPE=Release ..
    - make -j$(nproc) blurtd cli_wallet
  # cli wallet is only used for witness, so we capture it from the witness build
  tags:
    - metal
  artifacts:
    paths:
      - /builds/blurt/blurt/build/bin/

low_memory:
  image: conanio/clang10
  before_script:
    - sudo apt-get update -qq
    - sudo apt-get install -qq doxygen
    - conan config set storage.path="${CI_PROJECT_DIR}/.cache/conan"
    # Pull in submodules
    - git submodule update --init --recursive
    # ccache for acceleration
    - mkdir -p ccache
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache
  stage: build
  script:
    - mkdir build
    - cd build
    - conan install .. -s compiler=clang -s compiler.libcxx=libstdc++11 -if=. -pr=default --build=missing
    # Witness Build Config: -DLOW_MEMORY_NODE=ON -DCLEAR_VOTES=ON
    - cmake -DBLURT_STATIC_BUILD=ON -DLOW_MEMORY_NODE=ON -DCLEAR_VOTES=ON -DBUILD_BLURT_TESTNET=OFF -DSKIP_BY_TX_ID=ON -DBLURT_LINT_LEVEL=OFF -DENABLE_MIRA=ON -DCMAKE_BUILD_TYPE=Release ..
    - make -j$(nproc) blurtd cli_wallet
  tags:
    - metal
  artifacts:
    paths:
      - /builds/blurt/blurt/build/bin/

rpc:
  image: conanio/clang10
  before_script:
    - sudo apt-get update -qq
    - sudo apt-get install -qq doxygen
    - conan config set storage.path="${CI_PROJECT_DIR}/.cache/conan"
    # Pull in submodules
    - git submodule update --init --recursive
    # ccache for acceleration
    - mkdir -p ccache
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache
  stage: build
  script:
    - mkdir build
    - cd build
    - conan install .. -s compiler=clang -s compiler.libcxx=libstdc++11 -if=. -pr=default --build=missing
    - cmake -DBLURT_STATIC_BUILD=ON -DLOW_MEMORY_NODE=OFF -DCLEAR_VOTES=OFF -DBUILD_BLURT_TESTNET=OFF -DSKIP_BY_TX_ID=OFF -DBLURT_LINT_LEVEL=OFF -DENABLE_MIRA=OFF -DCMAKE_BUILD_TYPE=Release ..
    - make -j$(nproc) blurtd cli_wallet
  tags:
    - metal
  artifacts:
    paths:
      - /builds/blurt/blurt/build/bin/

pdfs:
  image: debian:10
  stage: pdfs
  #makes sure that the document generator does not pick up the cache and do strange things.
  cache: {}
  before_script:
    # Download and install pandoc and kramdown before we begin
    # pandoc does PDF, but requires pdflatex, which can be a ~500mb download
    # so we go for kramdown, which handles PDF, but doesn't handle DOCX
    - apt-get update -y
    - apt-get install -y pandoc texlive-xetex
  script:
    # Runs pandoc on all .md files in the repo and outputs them as PDF and DOCX
    - pandoc doc/witnesses/README.md --pdf-engine=xelatex --o witnesses.pdf
  artifacts:
    # Attach all untracked files (e.g. files that were recently created and not yet committed to git) as artifacts.
    # These are the files you then download after the job has finished.
    untracked: true
  only:
    changes:
      - doc/witnesses.md
  tags:
      - metal
  needs: []

kaniko low memory:
  stage: docker
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/contrib/Dockerfiles/ci/Dockerfile --destination $CI_REGISTRY_IMAGE/low_memory:$CI_COMMIT_BRANCH
  dependencies:
    - low_memory

kaniko rpc:
  stage: docker
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/contrib/Dockerfiles/ci/Dockerfile --destination $CI_REGISTRY_IMAGE/rpc:$CI_COMMIT_BRANCH
  dependencies:
    - rpc

kaniko lm no mira:
  stage: docker
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/contrib/Dockerfiles/ci/Dockerfile --destination $CI_REGISTRY_IMAGE/rpcnomira:$CI_COMMIT_BRANCH
  dependencies:
    - lm no mira



