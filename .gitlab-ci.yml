stages:
  - build-env
  - build
  - docker
  - test
  - devices

condenser-docker-push:
  needs: []
  when: manual
  stage: build
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker buildx build --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH --cache-from $CI_REGISTRY_IMAGE/condenser:cache --cache-to $CI_REGISTRY_IMAGE/condenser:cache --push --platform linux/arm64,linux/amd64 ./ui
  tags:
    - shell-arch


instablurt-amd64:
  needs: []
  when: manual
  stage: docker
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker run -d --name instablurt-amd64 $CI_REGISTRY_IMAGE/witness:dev
    - sleep 9000
    - docker commit instablurt-amd64
    - tocker tag instablurt-amd64 $CI_REGISTRY/instablurt-amd64
  tags: 
    - shell-arch


instablurt-arm64:
  needs: []
  when: manual
  stage: docker
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker run -d --net=host --restart=unless-stopped --name instablurt-arm64 faddat/arm-blurt-presync /usr/bin/blurtd --data-dir /blurtd --plugin "witness account_by_key account_by_key_api condenser_api database_api network_broadcast_api transaction_status transaction_status_api rc_api" --p2p-seed-node 172.26.41.78:1776 --p2p-seed-node 172.26.179.68:1776 --p2p-seed-node 172.26.116.111:1776 --p2p-seed-node 172.26.71.157:1776 --p2p-seed-node 172.26.215.48:1776 --p2p-seed-node 172.26.210.82:1776 --p2p-seed-node 172.26.84.164:1776 --p2p-seed-node 172.26.106.151:1776
    - sleep 3000
    - docker commit instablurt-arm64
    - tocker tag instablurt-amd64 $CI_REGISTRY_IMAGE/instablurt-arm64
  tags: 
    - arm64-shell



condenser-docker-test:
  needs: []
  stage: build
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker buildx build --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH --cache-from $CI_REGISTRY_IMAGE/condenser:cache --cache-to $CI_REGISTRY_IMAGE/condenser:cache --platform linux/arm64,linux/amd64 ./ui
  tags:
    - shell-arch

# Hard Fork 3
testnet:
    stage: build
    variables:
      CC: "ccache clang"
      CXX: "ccache clang++"
    needs: []
    script:
    - mkdir build
    - cd build
    - conan install .. -s compiler=clang -s compiler.libcxx=libstdc++11 -if=. -pr=default --build=missing
    - cmake -DBLURT_STATIC_BUILD=ON -DLOW_MEMORY_NODE=OFF -DCLEAR_VOTES=OFF -WINT_IN_BOOL_CONTEXT=OFF -DBUILD_BLURT_TESTNET=ON -DSKIP_BY_TX_ID=ON -DBLURT_LINT_LEVEL=FULL -DENABLE_MIRA=OFF -DCMAKE_BUILD_TYPE=Release ..
    - make -j$(nproc) blurtd cli_wallet
    tags:
    - shell-arch
    artifacts:
      paths:
        - build/bin/

sonarcloud: 
  stage: test
  tags: 
    - shell-arch
  needs: []
  variables:
    CC: "ccache clang"
    CXX: "ccache clang++"
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  script:
    # Download build-wrapper
    - curl "${SONAR_HOST_URL}/static/cpp/build-wrapper-linux-x86.zip" --output build-wrapper-linux-x86.zip
    - unzip build-wrapper-linux-x86.zip
    # workaround to the bw haswell bug
    - cp build-wrapper-linux-x86/libinterceptor-x86_64.so build-wrapper-linux-x86/libinterceptor-haswell.so
    # get sonar-scanner
    - curl 'https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.2.0.1873-linux.zip' --output sonar-scanner-cli-4.2.0.1873-linux.zip
    - unzip sonar-scanner-cli-4.2.0.1873-linux.zip
    - mv sonar-scanner-4.2.0.1873-linux sonar-scanner
    # Configure and compile blurt
    - mkdir build
    - cd build
    - conan install .. -s compiler=clang -s compiler.libcxx=libstdc++11 -if=. -pr=default --build=missing
    - cmake -DBLURT_STATIC_BUILD=ON -DLOW_MEMORY_NODE=ON -DCLEAR_VOTES=ON -WINT_IN_BOOL_CONTEXT=OFF -DBUILD_BLURT_TESTNET=OFF -DSKIP_BY_TX_ID=ON -DBLURT_LINT_LEVEL=OFF -DENABLE_MIRA=ON -DCMAKE_BUILD_TYPE=Release ..
    - cd ..
    # run the build inside the build wrapper
    - build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir . cmake --build build/ --config Release --parallel --target blurtd cli_wallet
    - sonar-scanner/bin/sonar-scanner -X -Dsonar.host.url="${SONAR_HOST_URL}" -Dsonar.token="${SONAR_TOKEN}"
  artifacts:
    paths:
      - /builds/blurt/blurt/build/bin/  
  only:
    - merge_requests
    - master
    - dev


# DISABLED BECAUSE OF ISSUES WITH LOPSIDED/ARCHLINUX
# Specifically, an archlinux-keyring issue
megadrive-build-env:
  stage: build-env
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker buildx build --file contrib/Dockerfiles/builder --tag $CI_REGISTRY_IMAGE/md-env --push --platform linux/arm64,linux/amd64 .
  tags:
    - amd64-shell


# Builds blurt arm64-ified
megadrive-build-ubuntu:
  stage: build
  script:
    - mkdir build
    - cd build
    - conan install .. -s compiler=clang -s compiler.libcxx=libstdc++11 -if=. -pr=default --build=missing
    - cmake -DBLURT_STATIC_BUILD=ON -DLOW_MEMORY_NODE=ON -DCLEAR_VOTES=ON -WINT_IN_BOOL_CONTEXT=OFF -DBUILD_BLURT_TESTNET=OFF -DSKIP_BY_TX_ID=ON -DBLURT_LINT_LEVEL=FULL -DENABLE_MIRA=OFF -DCMAKE_BUILD_TYPE=Release ..
    - make -j$(nproc) blurtd cli_wallet
  tags:
    - arm64-shell
  artifacts:
    paths:
      - build/bin


# Builds blurt arm64 testnet
megadrive-testnet-ubuntu:
  stage: build
  script:
    - mkdir build
    - cd build
    - conan install .. -s compiler=clang -s compiler.libcxx=libstdc++11 -if=. -pr=default --build=missing
    - cmake -DBLURT_STATIC_BUILD=ON -DLOW_MEMORY_NODE=ON -DCLEAR_VOTES=ON -WINT_IN_BOOL_CONTEXT=OFF -DBUILD_BLURT_TESTNET=ON -DSKIP_BY_TX_ID=ON -DBLURT_LINT_LEVEL=FULL -DENABLE_MIRA=OFF -DCMAKE_BUILD_TYPE=Release ..
    - make -j$(nproc) blurtd cli_wallet
  tags:
    - arm64-shell
  artifacts:
    paths:
      - build/bin



# construct the light cryptopie device image.  runs blurt on sos-lite as a container.
raspberrypi4:
  when: manual
  needs: []
  stage: devices
  script:
    - docker buildx build --file contrib/cryptopie/Dockerfile --platform linux/arm64 --tag cryptopie --load --progress plain .
    - bash contrib/cryptopie/build.sh
    - xz -T $(nproc) images/cryptopie.img
    - export STAMP=$(date "+%F-%T")
    - mv images/cryptopie.img.xz /static/cryptopie/cryptopie-$(echo $STAMP).img.xz
    - sudo ipfs add -Q /static/cryptopie/cryptopie-$(echo $STAMP).img.xz > /static/cryptopie/cryptopie-$(echo $STAMP).html
  tags:
    - shell-arch

# construct the light odroid-c2 device image.  runs blurt on sos-lite as a container.
oroid-c2:
  when: manual
  needs: []
  stage: devices
  script:
    - docker buildx build --file contrib/c2/Dockerfile --platform linux/arm64 --tag c2 --load --progress plain .
    - bash contrib/c2/build.sh
    - xz -T $(nproc) images/megadrive-light.img
    - export STAMP=$(date "+%F-%T")
    - mv images/megadrive-light.img.xz /static/c2-light/c2-light-$(echo $STAMP).img.xz
    - sudo ipfs add -Q /static/c2-light/c2-light-$(echo $STAMP).img.xz > /static/c2-light/c2-light-$(echo $STAMP).html
  tags:
    - shell-arch

# tests the dblurt client library
dblurt:
  needs: []
  image: node
  stage: test
  script:
    - cd client-libs/dblurt
    - npm install
    - npm test

# construct the megadrive arch container
megadrive-container:
  needs: 
    - megadrive-build-ubuntu
  stage: docker
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker buildx build --file contrib/Dockerfiles/ci/Dockerfile --platform linux/arm64 --tag $CI_REGISTRY_IMAGE/megadrive:$CI_COMMIT_BRANCH --push --progress plain .
  tags:
    - shell-arch
  dependencies:
    - megadrive-build-ubuntu
  
# construct the megadrive arch container
megadrive-testnet-container:
  needs: 
    - megadrive-testnet-ubuntu
  stage: docker
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker buildx build --file contrib/Dockerfiles/ci/Dockerfile --platform linux/arm64 --tag $CI_REGISTRY_IMAGE/megadrive:$CI_COMMIT_BRANCH --push --progress plain .
  tags:
    - shell-arch
  dependencies:
    - megadrive-testnet-ubuntu

witness:
  stage: build
  variables:
    CC: "ccache clang"
    CXX: "ccache clang++"
  script:
    - mkdir build
    - cd build
    - conan install .. -s compiler=clang -s compiler.libcxx=libstdc++11 -if=. -pr=default --build=missing
    # Witness Build Config: -DLOW_MEMORY_NODE=ON -DCLEAR_VOTES=ON
    - cmake -DBLURT_STATIC_BUILD=ON -DLOW_MEMORY_NODE=ON -DCLEAR_VOTES=ON -WINT_IN_BOOL_CONTEXT=OFF -DBUILD_BLURT_TESTNET=OFF -DSKIP_BY_TX_ID=ON -DBLURT_LINT_LEVEL=OFF -DENABLE_MIRA=OFF -DCMAKE_BUILD_TYPE=Release ..
    - make -j$(nproc) blurtd cli_wallet
  # cli wallet is only used for witness, so we capture it from the witness build
  tags:
    - shell-arch
  artifacts:
    paths:
      - build/bin/
  needs: []

#mira:
#  stage: build
#  variables:
#    CC: "ccache clang"
#    CXX: "ccache clang++"
#  script:
#    - mkdir build
#    - cd build
#    - conan install .. -s compiler=clang -s compiler.libcxx=libstdc++11 -if=. -pr=default --build=missing
#    - cmake -DBLURT_STATIC_BUILD=ON -DLOW_MEMORY_NODE=ON -DCLEAR_VOTES=ON -WINT_IN_BOOL_CONTEXT=OFF -DBUILD_BLURT_TESTNET=OFF -DSKIP_BY_TX_ID=ON -DBLURT_LINT_LEVEL=OFF -DENABLE_MIRA=ON -DCMAKE_BUILD_TYPE=Release ..
#    - make -j$(nproc) blurtd cli_wallet
#  tags:
#    - shell-arch
#  artifacts:
#    paths:
#      - build/bin/
#  needs: []

rpc:
  stage: build
  variables:
    CC: "ccache clang"
    CXX: "ccache clang++"
  script:
    - mkdir build
    - cd build
    - conan install .. -s compiler=clang -s compiler.libcxx=libstdc++11 -if=. -pr=default --build=missing
    - cmake -DBLURT_STATIC_BUILD=ON -DLOW_MEMORY_NODE=OFF -DCLEAR_VOTES=OFF -WINT_IN_BOOL_CONTEXT=OFF -DBUILD_BLURT_TESTNET=OFF -DSKIP_BY_TX_ID=OFF -DBLURT_LINT_LEVEL=OFF -DENABLE_MIRA=OFF -DCMAKE_BUILD_TYPE=Release ..
    - make -j$(nproc) blurtd cli_wallet
  tags:
    - shell-arch
  artifacts:
    paths:
      - build/bin/
  needs: []


kaniko witness:
  stage: docker
  needs:
    - witness
  dependencies:
    - witness
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/contrib/Dockerfiles/ci/Dockerfile --destination $CI_REGISTRY_IMAGE/witness:$CI_COMMIT_BRANCH
  

kaniko rpc:
  stage: docker
  needs:
    - rpc
  dependencies:
    - rpc
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/contrib/Dockerfiles/rpc/Dockerfile --destination $CI_REGISTRY_IMAGE/rpc:$CI_COMMIT_BRANCH


kaniko testnet:
  stage: docker
  needs:
    - testnet
  dependencies:
    - testnet
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/contrib/Dockerfiles/rpc/Dockerfile --destination $CI_REGISTRY_IMAGE/testnet:$CI_COMMIT_BRANCH
  

#kaniko mira:
#  stage: docker
#  needs:
#    - mira
#  dependencies:
#    - mira
#  image:
#    name: gcr.io/kaniko-project/executor:debug
#    entrypoint: [""]
#  script:
#    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
#    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/contrib/Dockerfiles/ci/Dockerfile --destination $CI_REGISTRY_IMAGE/mira:$CI_COMMIT_BRANCH
  
include:
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
