stages:
  - build-env
  - build
  - docker
  - images
  - pdfs





megadrive-build-env:
  stage: build-env
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker buildx build --file megadrive/build/Dockerfile --tag $CI_REGISTRY_IMAGE/md-env --load --platform linux/arm64 .
    - docker push $CI_REGISTRY_IMAGE/md-env
  tags:
    - arm64-shell


# megadrive-build-arch:
#  stage: build
#  image: $CI_REGISTRY_IMAGE/md-env
#  cache: 
#    paths:
#      - /root/.ccache
#  script:
#    - mkdir build
#    - cd build
#    - conan install .. -s compiler=clang -s compiler.libcxx=libstdc++11 -if=. -pr=default --build=missing
#    - cmake -DBLURT_STATIC_BUILD=ON -DLOW_MEMORY_NODE=ON -DCLEAR_VOTES=ON -DBUILD_BLURT_TESTNET=OFF -DSKIP_BY_TX_ID=ON -DBLURT_LINT_LEVEL=OFF -DENABLE_MIRA=OFF -DCMAKE_BUILD_TYPE=Release ..
#    - make -j$(nproc) blurtd cli_wallet
#  tags:
#    - arm64
#  artifacts:
#    paths:
#      - build/bin
#  needs: 
#    - megadrive-build-env


megadrive-build-ubuntu:
  stage: build
  script:
    - mkdir build
    - cd build
    - conan install .. -s compiler=clang -s compiler.libcxx=libstdc++11 -if=. -pr=default --build=missing
    - cmake -DBLURT_STATIC_BUILD=ON -DLOW_MEMORY_NODE=ON -DCLEAR_VOTES=ON -DBUILD_BLURT_TESTNET=OFF -DSKIP_BY_TX_ID=ON -DBLURT_LINT_LEVEL=OFF -DENABLE_MIRA=OFF -DCMAKE_BUILD_TYPE=Release ..
    - make -j$(nproc) blurtd cli_wallet
  tags:
    - arm64-shell
  artifacts:
    paths:
      - build/bin
  needs: []


# construct the megadrive device image, runs blurt on SOS as a systemd service without docker
megadrive-os:
  needs: 
    - megadrive-build-ubuntu
  dependencies:
    - megadrive-build-ubuntu
  stage: images
  script:
    - docker buildx build --file megadrive/Dockerfile --platform linux/arm64 --tag megadrive --load --progress plain .
    - bash megadrive/build.sh
    - xz -T $(nproc) images/megadrive.img
    - export STAMP=$(date "+%F-%T")
    - mv images/megadrive.img.xz /static/megadrive/megadrive$(echo $STAMP).img.xz
    - sudo ipfs add -Q /static/megadrive/megadrive$(echo $STAMP).img.xz > /static/megadrive/megadrive$(echo $STAMP).html
  tags:
    - shell-arch

# construct the light megadrive device image.  runs blurt on sos-lite as a systemd service which in turn runs using docker.
megadrive-light-rpi:
  needs: 
    - megadrive-build-ubuntu
  dependencies:
    - megadrive-build-ubuntu
  stage: images
  script:
    - docker buildx build --file megadrive/light/Dockerfile --platform linux/arm64 --tag megadrive-light --load --progress plain .
    - bash megadrive/light/build.sh
    - xz -T $(nproc) images/megadrive-light.img
    - export STAMP=$(date "+%F-%T")
    - mv images/megadrive-light.img.xz /static/megadrive-light/megadrive-light$(echo $STAMP).img.xz
    - sudo ipfs add -Q /static/megadrive-light/megadrive-light$(echo $STAMP).img.xz > /static/megadrive-light/megadrive-light$(echo $STAMP).html
  tags:
    - shell-arch

megadrive-light-oroid-c2:
  needs: 
    - megadrive-build-ubuntu
  dependencies:
    - megadrive-build-ubuntu
  stage: images
  script:
    - docker buildx build --file megadrive/light/Dockerfile --platform linux/arm64 --tag megadrive-light --load --progress plain .
    - bash megadrive/c2-light/build.sh
    - xz -T $(nproc) images/megadrive-light.img
    - export STAMP=$(date "+%F-%T")
    - mv images/megadrive-light.img.xz /static/megadrive-light/megadrive-light-c2$(echo $STAMP).img.xz
    - sudo ipfs add -Q /static/megadrive-light/megadrive-light-c2$(echo $STAMP).img.xz > /static/megadrive-light/megadrive-light-c2$(echo $STAMP).html
  tags:
    - shell-arch



# construct the megadrive arch container
megadrive-container:
  needs: 
    - megadrive-build-ubuntu
  stage: docker
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker buildx build --file contrib/Dockerfiles/ci/Dockerfile --platform linux/arm64 --tag $CI_REGISTRY_IMAGE/megadrive --push --progress plain .
  tags:
    - shell-arch
  dependencies:
    - megadrive-build-ubuntu


lm no mira:
  stage: build
  script:
    - mkdir build
    - cd build
    - conan install .. -s compiler=clang -s compiler.libcxx=libstdc++11 -if=. -pr=default --build=missing
    # Witness Build Config: -DLOW_MEMORY_NODE=ON -DCLEAR_VOTES=ON
    - cmake -DBLURT_STATIC_BUILD=ON -DLOW_MEMORY_NODE=ON -DCLEAR_VOTES=ON -DBUILD_BLURT_TESTNET=OFF -DSKIP_BY_TX_ID=ON -DBLURT_LINT_LEVEL=OFF -DENABLE_MIRA=OFF -DCMAKE_BUILD_TYPE=Release ..
    - make -j$(nproc) blurtd cli_wallet
  # cli wallet is only used for witness, so we capture it from the witness build
  tags:
    - shell-arch
  artifacts:
    paths:
      - build/bin/
  needs: []

low memory:
  stage: build
  script:
    - mkdir build
    - cd build
    - conan install .. -s compiler=clang -s compiler.libcxx=libstdc++11 -if=. -pr=default --build=missing
    - cmake -DBLURT_STATIC_BUILD=ON -DLOW_MEMORY_NODE=ON -DCLEAR_VOTES=ON -DBUILD_BLURT_TESTNET=OFF -DSKIP_BY_TX_ID=ON -DBLURT_LINT_LEVEL=OFF -DENABLE_MIRA=ON -DCMAKE_BUILD_TYPE=Release ..
    - make -j$(nproc) blurtd cli_wallet
  tags:
    - shell-arch
  artifacts:
    paths:
      - build/bin/
  needs: []

rpc:
  stage: build
  script:
    - mkdir build
    - cd build
    - conan install .. -s compiler=clang -s compiler.libcxx=libstdc++11 -if=. -pr=default --build=missing
    - cmake -DBLURT_STATIC_BUILD=ON -DLOW_MEMORY_NODE=OFF -DCLEAR_VOTES=OFF -DBUILD_BLURT_TESTNET=OFF -DSKIP_BY_TX_ID=OFF -DBLURT_LINT_LEVEL=OFF -DENABLE_MIRA=OFF -DCMAKE_BUILD_TYPE=Release ..
    - make -j$(nproc) blurtd cli_wallet
  tags:
    - shell-arch
  artifacts:
    paths:
      - build/bin/
  needs: []

pdfs:
  image: debian:10
  stage: pdfs
  #makes sure that the document generator does not pick up the cache and do strange things.
  cache: {}
  before_script:
    # Download and install pandoc and kramdown before we begin
    # pandoc does PDF, but requires pdflatex, which can be a ~500mb download
    # so we go for kramdown, which handles PDF, but doesn't handle DOCX
    - apt-get update -y
    - apt-get install -y pandoc texlive-xetex
  script:
    # Runs pandoc on all .md files in the repo and outputs them as PDF and DOCX
    - pandoc doc/witnesses/README.md --pdf-engine=xelatex --o witnesses.pdf
  artifacts:
    # Attach all untracked files (e.g. files that were recently created and not yet committed to git) as artifacts.
    # These are the files you then download after the job has finished.
    untracked: true
  only:
    changes:
      - doc/witnesses.md
  tags:
      - metal
  needs: []

kaniko low memory:
  stage: docker
  needs:
    - low memory
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/contrib/Dockerfiles/ci/Dockerfile --destination $CI_REGISTRY_IMAGE/low_memory:$CI_COMMIT_BRANCH
  dependencies:
    - low memory

kaniko rpc:
  stage: docker
  needs:
    - rpc
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/contrib/Dockerfiles/rpc/Dockerfile --destination $CI_REGISTRY_IMAGE/rpc:$CI_COMMIT_BRANCH
  dependencies:
    - rpc

kaniko lm no mira:
  stage: docker
  needs: 
    - lm no mira
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/contrib/Dockerfiles/ci/Dockerfile --destination $CI_REGISTRY_IMAGE/rpcnomira:$CI_COMMIT_BRANCH
  dependencies:
    - lm no mira
